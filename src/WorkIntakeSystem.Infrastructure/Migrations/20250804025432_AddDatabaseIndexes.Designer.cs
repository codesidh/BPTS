// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WorkIntakeSystem.Infrastructure.Data;

#nullable disable

namespace WorkIntakeSystem.Infrastructure.Migrations
{
    [DbContext(typeof(WorkIntakeDbContext))]
    [Migration("20250804025432_AddDatabaseIndexes")]
    partial class AddDatabaseIndexes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WorkIntakeSystem.Core.Entities.AuditTrail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ChangedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("ChangedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CorrelationId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<string>("NewValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityContext")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("{}");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("WorkRequestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Action")
                        .HasDatabaseName("IX_AuditTrails_Action");

                    b.HasIndex("ChangedById")
                        .HasDatabaseName("IX_AuditTrails_ChangedById");

                    b.HasIndex("ChangedDate")
                        .HasDatabaseName("IX_AuditTrails_ChangedDate");

                    b.HasIndex("WorkRequestId")
                        .HasDatabaseName("IX_AuditTrails_WorkRequestId");

                    b.HasIndex("Action", "ChangedDate")
                        .HasDatabaseName("IX_AuditTrails_ActionChangedDate");

                    b.HasIndex("ChangedById", "ChangedDate")
                        .HasDatabaseName("IX_AuditTrails_ChangedByChangedDate");

                    b.HasIndex("WorkRequestId", "ChangedDate")
                        .HasDatabaseName("IX_AuditTrails_WorkRequestChangedDate");

                    b.ToTable("AuditTrails");
                });

            modelBuilder.Entity("WorkIntakeSystem.Core.Entities.BusinessCapability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BusinessVerticalId")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Configuration")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("{}");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DependencyMap")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("{}");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ResourceRequirements")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("{}");

                    b.Property<string>("SubCategory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TechnicalOwner")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessVerticalId");

                    b.ToTable("BusinessCapabilities");
                });

            modelBuilder.Entity("WorkIntakeSystem.Core.Entities.BusinessVertical", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Configuration")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("{}");

                    b.Property<string>("ConfigurationHistory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("[]");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("BusinessVerticals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Configuration = "{}",
                            ConfigurationHistory = "[]",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 4, 2, 54, 32, 113, DateTimeKind.Utc).AddTicks(9567),
                            Description = "Medicaid business vertical",
                            IsActive = true,
                            ModifiedBy = "System",
                            ModifiedDate = new DateTime(2025, 8, 4, 2, 54, 32, 113, DateTimeKind.Utc).AddTicks(9569),
                            Name = "Medicaid",
                            Version = 1
                        });
                });

            modelBuilder.Entity("WorkIntakeSystem.Core.Entities.CapabilityDepartmentMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessLevel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("CanApprove")
                        .HasColumnType("bit");

                    b.Property<bool>("CanCreate")
                        .HasColumnType("bit");

                    b.Property<bool>("CanModify")
                        .HasColumnType("bit");

                    b.Property<bool>("CanView")
                        .HasColumnType("bit");

                    b.Property<int>("CapabilityId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("CapabilityId", "DepartmentId")
                        .IsUnique();

                    b.ToTable("CapabilityDepartmentMappings");
                });

            modelBuilder.Entity("WorkIntakeSystem.Core.Entities.ConfigurationChangeRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApprovedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangeReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConfigurationId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImplementationNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ImplementedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RejectedReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestedValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RollbackDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("ApprovedDate")
                        .HasDatabaseName("IX_ConfigurationChangeRequests_ApprovedDate");

                    b.HasIndex("ConfigurationId")
                        .HasDatabaseName("IX_ConfigurationChangeRequests_ConfigurationId");

                    b.HasIndex("ImplementedDate")
                        .HasDatabaseName("IX_ConfigurationChangeRequests_ImplementedDate");

                    b.HasIndex("RequestedById")
                        .HasDatabaseName("IX_ConfigurationChangeRequests_RequestedById");

                    b.HasIndex("RequestedDate")
                        .HasDatabaseName("IX_ConfigurationChangeRequests_RequestedDate");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_ConfigurationChangeRequests_Status");

                    b.HasIndex("ConfigurationId", "Status")
                        .HasDatabaseName("IX_ConfigurationChangeRequests_ConfigurationStatus");

                    b.HasIndex("RequestedById", "Status")
                        .HasDatabaseName("IX_ConfigurationChangeRequests_RequestedByStatus");

                    b.HasIndex("Status", "RequestedDate")
                        .HasDatabaseName("IX_ConfigurationChangeRequests_StatusRequestedDate");

                    b.ToTable("ConfigurationChangeRequests");
                });

            modelBuilder.Entity("WorkIntakeSystem.Core.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BusinessVerticalId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CurrentUtilization")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0.0m);

                    b.Property<string>("DepartmentCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ResourceCapacity")
                        .HasColumnType("int");

                    b.Property<string>("SkillMatrix")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("{}");

                    b.Property<decimal>("VotingWeight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(1.0m);

                    b.HasKey("Id");

                    b.HasIndex("BusinessVerticalId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BusinessVerticalId = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 4, 2, 54, 32, 113, DateTimeKind.Utc).AddTicks(9789),
                            CurrentUtilization = 0.0m,
                            DepartmentCode = "REG",
                            Description = "",
                            DisplayOrder = 1,
                            IsActive = true,
                            ModifiedBy = "System",
                            ModifiedDate = new DateTime(2025, 8, 4, 2, 54, 32, 113, DateTimeKind.Utc).AddTicks(9790),
                            Name = "Regulatory",
                            ResourceCapacity = 100,
                            SkillMatrix = "{}",
                            VotingWeight = 1.0m
                        },
                        new
                        {
                            Id = 2,
                            BusinessVerticalId = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 4, 2, 54, 32, 113, DateTimeKind.Utc).AddTicks(9809),
                            CurrentUtilization = 0.0m,
                            DepartmentCode = "COM",
                            Description = "",
                            DisplayOrder = 2,
                            IsActive = true,
                            ModifiedBy = "System",
                            ModifiedDate = new DateTime(2025, 8, 4, 2, 54, 32, 113, DateTimeKind.Utc).AddTicks(9809),
                            Name = "Compliance",
                            ResourceCapacity = 100,
                            SkillMatrix = "{}",
                            VotingWeight = 1.0m
                        },
                        new
                        {
                            Id = 3,
                            BusinessVerticalId = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 4, 2, 54, 32, 113, DateTimeKind.Utc).AddTicks(9897),
                            CurrentUtilization = 0.0m,
                            DepartmentCode = "COM",
                            Description = "",
                            DisplayOrder = 3,
                            IsActive = true,
                            ModifiedBy = "System",
                            ModifiedDate = new DateTime(2025, 8, 4, 2, 54, 32, 113, DateTimeKind.Utc).AddTicks(9897),
                            Name = "Communication",
                            ResourceCapacity = 100,
                            SkillMatrix = "{}",
                            VotingWeight = 1.0m
                        },
                        new
                        {
                            Id = 4,
                            BusinessVerticalId = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 4, 2, 54, 32, 113, DateTimeKind.Utc).AddTicks(9913),
                            CurrentUtilization = 0.0m,
                            DepartmentCode = "COM",
                            Description = "",
                            DisplayOrder = 4,
                            IsActive = true,
                            ModifiedBy = "System",
                            ModifiedDate = new DateTime(2025, 8, 4, 2, 54, 32, 113, DateTimeKind.Utc).AddTicks(9913),
                            Name = "Community Outreach",
                            ResourceCapacity = 100,
                            SkillMatrix = "{}",
                            VotingWeight = 1.0m
                        },
                        new
                        {
                            Id = 5,
                            BusinessVerticalId = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 4, 2, 54, 32, 113, DateTimeKind.Utc).AddTicks(9927),
                            CurrentUtilization = 0.0m,
                            DepartmentCode = "CLI",
                            Description = "",
                            DisplayOrder = 5,
                            IsActive = true,
                            ModifiedBy = "System",
                            ModifiedDate = new DateTime(2025, 8, 4, 2, 54, 32, 113, DateTimeKind.Utc).AddTicks(9927),
                            Name = "Clinical Services",
                            ResourceCapacity = 100,
                            SkillMatrix = "{}",
                            VotingWeight = 1.0m
                        },
                        new
                        {
                            Id = 6,
                            BusinessVerticalId = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 4, 2, 54, 32, 113, DateTimeKind.Utc).AddTicks(9945),
                            CurrentUtilization = 0.0m,
                            DepartmentCode = "CON",
                            Description = "",
                            DisplayOrder = 6,
                            IsActive = true,
                            ModifiedBy = "System",
                            ModifiedDate = new DateTime(2025, 8, 4, 2, 54, 32, 113, DateTimeKind.Utc).AddTicks(9945),
                            Name = "Contract Performance",
                            ResourceCapacity = 100,
                            SkillMatrix = "{}",
                            VotingWeight = 1.0m
                        },
                        new
                        {
                            Id = 7,
                            BusinessVerticalId = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 4, 2, 54, 32, 113, DateTimeKind.Utc).AddTicks(9960),
                            CurrentUtilization = 0.0m,
                            DepartmentCode = "OPE",
                            Description = "",
                            DisplayOrder = 7,
                            IsActive = true,
                            ModifiedBy = "System",
                            ModifiedDate = new DateTime(2025, 8, 4, 2, 54, 32, 113, DateTimeKind.Utc).AddTicks(9960),
                            Name = "Operations",
                            ResourceCapacity = 100,
                            SkillMatrix = "{}",
                            VotingWeight = 1.0m
                        },
                        new
                        {
                            Id = 8,
                            BusinessVerticalId = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 4, 2, 54, 32, 113, DateTimeKind.Utc).AddTicks(9973),
                            CurrentUtilization = 0.0m,
                            DepartmentCode = "PRO",
                            Description = "",
                            DisplayOrder = 8,
                            IsActive = true,
                            ModifiedBy = "System",
                            ModifiedDate = new DateTime(2025, 8, 4, 2, 54, 32, 113, DateTimeKind.Utc).AddTicks(9974),
                            Name = "Provider Network Operations",
                            ResourceCapacity = 100,
                            SkillMatrix = "{}",
                            VotingWeight = 1.0m
                        },
                        new
                        {
                            Id = 9,
                            BusinessVerticalId = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 4, 2, 54, 32, 113, DateTimeKind.Utc).AddTicks(9987),
                            CurrentUtilization = 0.0m,
                            DepartmentCode = "PRO",
                            Description = "",
                            DisplayOrder = 9,
                            IsActive = true,
                            ModifiedBy = "System",
                            ModifiedDate = new DateTime(2025, 8, 4, 2, 54, 32, 113, DateTimeKind.Utc).AddTicks(9987),
                            Name = "Provider Network Management",
                            ResourceCapacity = 100,
                            SkillMatrix = "{}",
                            VotingWeight = 1.0m
                        },
                        new
                        {
                            Id = 10,
                            BusinessVerticalId = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 4, 2, 54, 32, 114, DateTimeKind.Utc).AddTicks(2),
                            CurrentUtilization = 0.0m,
                            DepartmentCode = "SER",
                            Description = "",
                            DisplayOrder = 10,
                            IsActive = true,
                            ModifiedBy = "System",
                            ModifiedDate = new DateTime(2025, 8, 4, 2, 54, 32, 114, DateTimeKind.Utc).AddTicks(3),
                            Name = "Service Coordination",
                            ResourceCapacity = 100,
                            SkillMatrix = "{}",
                            VotingWeight = 1.0m
                        },
                        new
                        {
                            Id = 11,
                            BusinessVerticalId = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 4, 2, 54, 32, 114, DateTimeKind.Utc).AddTicks(15),
                            CurrentUtilization = 0.0m,
                            DepartmentCode = "DAT",
                            Description = "",
                            DisplayOrder = 11,
                            IsActive = true,
                            ModifiedBy = "System",
                            ModifiedDate = new DateTime(2025, 8, 4, 2, 54, 32, 114, DateTimeKind.Utc).AddTicks(15),
                            Name = "Data and Technical Services",
                            ResourceCapacity = 100,
                            SkillMatrix = "{}",
                            VotingWeight = 1.0m
                        },
                        new
                        {
                            Id = 12,
                            BusinessVerticalId = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 4, 2, 54, 32, 114, DateTimeKind.Utc).AddTicks(28),
                            CurrentUtilization = 0.0m,
                            DepartmentCode = "ASS",
                            Description = "",
                            DisplayOrder = 12,
                            IsActive = true,
                            ModifiedBy = "System",
                            ModifiedDate = new DateTime(2025, 8, 4, 2, 54, 32, 114, DateTimeKind.Utc).AddTicks(28),
                            Name = "Associate Relations",
                            ResourceCapacity = 100,
                            SkillMatrix = "{}",
                            VotingWeight = 1.0m
                        },
                        new
                        {
                            Id = 13,
                            BusinessVerticalId = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 4, 2, 54, 32, 114, DateTimeKind.Utc).AddTicks(40),
                            CurrentUtilization = 0.0m,
                            DepartmentCode = "FIN",
                            Description = "",
                            DisplayOrder = 13,
                            IsActive = true,
                            ModifiedBy = "System",
                            ModifiedDate = new DateTime(2025, 8, 4, 2, 54, 32, 114, DateTimeKind.Utc).AddTicks(41),
                            Name = "Finance and Actuarial",
                            ResourceCapacity = 100,
                            SkillMatrix = "{}",
                            VotingWeight = 1.0m
                        },
                        new
                        {
                            Id = 14,
                            BusinessVerticalId = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 4, 2, 54, 32, 114, DateTimeKind.Utc).AddTicks(54),
                            CurrentUtilization = 0.0m,
                            DepartmentCode = "HUM",
                            Description = "",
                            DisplayOrder = 14,
                            IsActive = true,
                            ModifiedBy = "System",
                            ModifiedDate = new DateTime(2025, 8, 4, 2, 54, 32, 114, DateTimeKind.Utc).AddTicks(54),
                            Name = "Human Resources",
                            ResourceCapacity = 100,
                            SkillMatrix = "{}",
                            VotingWeight = 1.0m
                        },
                        new
                        {
                            Id = 15,
                            BusinessVerticalId = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 4, 2, 54, 32, 114, DateTimeKind.Utc).AddTicks(68),
                            CurrentUtilization = 0.0m,
                            DepartmentCode = "PRO",
                            Description = "",
                            DisplayOrder = 15,
                            IsActive = true,
                            ModifiedBy = "System",
                            ModifiedDate = new DateTime(2025, 8, 4, 2, 54, 32, 114, DateTimeKind.Utc).AddTicks(68),
                            Name = "Program Management and Quality",
                            ResourceCapacity = 100,
                            SkillMatrix = "{}",
                            VotingWeight = 1.0m
                        },
                        new
                        {
                            Id = 16,
                            BusinessVerticalId = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 4, 2, 54, 32, 114, DateTimeKind.Utc).AddTicks(81),
                            CurrentUtilization = 0.0m,
                            DepartmentCode = "QUA",
                            Description = "",
                            DisplayOrder = 16,
                            IsActive = true,
                            ModifiedBy = "System",
                            ModifiedDate = new DateTime(2025, 8, 4, 2, 54, 32, 114, DateTimeKind.Utc).AddTicks(81),
                            Name = "Quality",
                            ResourceCapacity = 100,
                            SkillMatrix = "{}",
                            VotingWeight = 1.0m
                        },
                        new
                        {
                            Id = 17,
                            BusinessVerticalId = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 4, 2, 54, 32, 114, DateTimeKind.Utc).AddTicks(115),
                            CurrentUtilization = 0.0m,
                            DepartmentCode = "POP",
                            Description = "",
                            DisplayOrder = 17,
                            IsActive = true,
                            ModifiedBy = "System",
                            ModifiedDate = new DateTime(2025, 8, 4, 2, 54, 32, 114, DateTimeKind.Utc).AddTicks(115),
                            Name = "Population Health Medical Services",
                            ResourceCapacity = 100,
                            SkillMatrix = "{}",
                            VotingWeight = 1.0m
                        });
                });

            modelBuilder.Entity("WorkIntakeSystem.Core.Entities.EventStore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AggregateId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CausationId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CorrelationId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EventData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EventVersion")
                        .HasColumnType("int");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("{}");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int?>("WorkRequestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkRequestId");

                    b.HasIndex("AggregateId", "EventVersion");

                    b.ToTable("EventStore");
                });

            modelBuilder.Entity("WorkIntakeSystem.Core.Entities.Priority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BusinessValueScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(3,2)")
                        .HasDefaultValue(0.5m);

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResourceImpactAssessment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("StrategicAlignment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(3,2)")
                        .HasDefaultValue(0.5m);

                    b.Property<int>("Vote")
                        .HasColumnType("int");

                    b.Property<int>("VotedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("VotedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Weight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(3,2)")
                        .HasDefaultValue(1.0m);

                    b.Property<int>("WorkRequestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("IX_Priorities_DepartmentId");

                    b.HasIndex("VotedById")
                        .HasDatabaseName("IX_Priorities_VotedById");

                    b.HasIndex("VotedDate")
                        .HasDatabaseName("IX_Priorities_VotedDate");

                    b.HasIndex("Weight")
                        .HasDatabaseName("IX_Priorities_Weight");

                    b.HasIndex("WorkRequestId")
                        .HasDatabaseName("IX_Priorities_WorkRequestId");

                    b.HasIndex("DepartmentId", "VotedDate")
                        .HasDatabaseName("IX_Priorities_DepartmentVotedDate");

                    b.HasIndex("WorkRequestId", "DepartmentId")
                        .IsUnique();

                    b.HasIndex("WorkRequestId", "Weight")
                        .HasDatabaseName("IX_Priorities_WorkRequestWeight");

                    b.ToTable("Priorities");
                });

            modelBuilder.Entity("WorkIntakeSystem.Core.Entities.SystemConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("BusinessVerticalId")
                        .HasColumnType("int");

                    b.Property<string>("ChangeReason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ConfigurationKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConfigurationValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEditable")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PreviousVersionId")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessVerticalId");

                    b.HasIndex("PreviousVersionId");

                    b.HasIndex("ConfigurationKey", "BusinessVerticalId", "Version")
                        .IsUnique()
                        .HasFilter("[BusinessVerticalId] IS NOT NULL");

                    b.ToTable("SystemConfigurations");
                });

            modelBuilder.Entity("WorkIntakeSystem.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BusinessVerticalId")
                        .HasColumnType("int");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CurrentWorkload")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0.0m);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PasswordSalt")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("SkillSet")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("{}");

                    b.HasKey("Id");

                    b.HasIndex("BusinessVerticalId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WorkIntakeSystem.Core.Entities.WorkCategoryConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApprovalMatrix")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("{}");

                    b.Property<int>("BusinessVerticalId")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomFields")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("{}");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NotificationTemplates")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("{}");

                    b.Property<string>("RequiredFields")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("{}");

                    b.Property<int?>("SLAHours")
                        .HasColumnType("int");

                    b.Property<string>("ValidationRules")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("{}");

                    b.Property<int?>("WorkflowTemplateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessVerticalId");

                    b.ToTable("WorkCategoryConfigurations");
                });

            modelBuilder.Entity("WorkIntakeSystem.Core.Entities.WorkRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ActualDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ActualEffort")
                        .HasColumnType("int");

                    b.Property<decimal>("BusinessValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(3,2)")
                        .HasDefaultValue(0.5m);

                    b.Property<int>("BusinessVerticalId")
                        .HasColumnType("int");

                    b.Property<int?>("CapabilityId")
                        .HasColumnType("int");

                    b.Property<decimal>("CapacityAdjustment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(3,2)")
                        .HasDefaultValue(1.0m);

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentStage")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EstimatedEffort")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(3,2)")
                        .HasDefaultValue(0.0m);

                    b.Property<int>("PriorityLevel")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("SubmitterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TargetDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TimeDecayFactor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(3,2)")
                        .HasDefaultValue(1.0m);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessVerticalId")
                        .HasDatabaseName("IX_WorkRequests_BusinessVerticalId");

                    b.HasIndex("CapabilityId")
                        .HasDatabaseName("IX_WorkRequests_CapabilityId");

                    b.HasIndex("Category")
                        .HasDatabaseName("IX_WorkRequests_Category");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_WorkRequests_CreatedDate");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("IX_WorkRequests_DepartmentId");

                    b.HasIndex("ModifiedDate")
                        .HasDatabaseName("IX_WorkRequests_ModifiedDate");

                    b.HasIndex("Priority")
                        .HasDatabaseName("IX_WorkRequests_Priority");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_WorkRequests_Status");

                    b.HasIndex("SubmitterId")
                        .HasDatabaseName("IX_WorkRequests_SubmitterId");

                    b.HasIndex("BusinessVerticalId", "Status", "Priority")
                        .HasDatabaseName("IX_WorkRequests_VerticalStatusPriority");

                    b.HasIndex("DepartmentId", "Status", "CreatedDate")
                        .HasDatabaseName("IX_WorkRequests_DepartmentStatusCreated");

                    b.HasIndex("Status", "Category", "Priority")
                        .HasDatabaseName("IX_WorkRequests_StatusCategoryPriority");

                    b.HasIndex("SubmitterId", "Status", "CreatedDate")
                        .HasDatabaseName("IX_WorkRequests_SubmitterStatusCreated");

                    b.ToTable("WorkRequests");
                });

            modelBuilder.Entity("WorkIntakeSystem.Core.Entities.AuditTrail", b =>
                {
                    b.HasOne("WorkIntakeSystem.Core.Entities.User", "ChangedBy")
                        .WithMany("AuditTrails")
                        .HasForeignKey("ChangedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkIntakeSystem.Core.Entities.WorkRequest", "WorkRequest")
                        .WithMany("AuditTrails")
                        .HasForeignKey("WorkRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangedBy");

                    b.Navigation("WorkRequest");
                });

            modelBuilder.Entity("WorkIntakeSystem.Core.Entities.BusinessCapability", b =>
                {
                    b.HasOne("WorkIntakeSystem.Core.Entities.BusinessVertical", "BusinessVertical")
                        .WithMany("BusinessCapabilities")
                        .HasForeignKey("BusinessVerticalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BusinessVertical");
                });

            modelBuilder.Entity("WorkIntakeSystem.Core.Entities.CapabilityDepartmentMapping", b =>
                {
                    b.HasOne("WorkIntakeSystem.Core.Entities.BusinessCapability", "Capability")
                        .WithMany("DepartmentMappings")
                        .HasForeignKey("CapabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkIntakeSystem.Core.Entities.Department", "Department")
                        .WithMany("CapabilityMappings")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Capability");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("WorkIntakeSystem.Core.Entities.ConfigurationChangeRequest", b =>
                {
                    b.HasOne("WorkIntakeSystem.Core.Entities.User", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WorkIntakeSystem.Core.Entities.SystemConfiguration", "Configuration")
                        .WithMany()
                        .HasForeignKey("ConfigurationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkIntakeSystem.Core.Entities.User", "RequestedBy")
                        .WithMany()
                        .HasForeignKey("RequestedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApprovedBy");

                    b.Navigation("Configuration");

                    b.Navigation("RequestedBy");
                });

            modelBuilder.Entity("WorkIntakeSystem.Core.Entities.Department", b =>
                {
                    b.HasOne("WorkIntakeSystem.Core.Entities.BusinessVertical", "BusinessVertical")
                        .WithMany("Departments")
                        .HasForeignKey("BusinessVerticalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BusinessVertical");
                });

            modelBuilder.Entity("WorkIntakeSystem.Core.Entities.EventStore", b =>
                {
                    b.HasOne("WorkIntakeSystem.Core.Entities.WorkRequest", "WorkRequest")
                        .WithMany("Events")
                        .HasForeignKey("WorkRequestId");

                    b.Navigation("WorkRequest");
                });

            modelBuilder.Entity("WorkIntakeSystem.Core.Entities.Priority", b =>
                {
                    b.HasOne("WorkIntakeSystem.Core.Entities.Department", "Department")
                        .WithMany("Priorities")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkIntakeSystem.Core.Entities.User", "VotedBy")
                        .WithMany("PriorityVotes")
                        .HasForeignKey("VotedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkIntakeSystem.Core.Entities.WorkRequest", "WorkRequest")
                        .WithMany("PriorityVotes")
                        .HasForeignKey("WorkRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("VotedBy");

                    b.Navigation("WorkRequest");
                });

            modelBuilder.Entity("WorkIntakeSystem.Core.Entities.SystemConfiguration", b =>
                {
                    b.HasOne("WorkIntakeSystem.Core.Entities.BusinessVertical", "BusinessVertical")
                        .WithMany()
                        .HasForeignKey("BusinessVerticalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WorkIntakeSystem.Core.Entities.SystemConfiguration", "PreviousVersion")
                        .WithMany("NextVersions")
                        .HasForeignKey("PreviousVersionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BusinessVertical");

                    b.Navigation("PreviousVersion");
                });

            modelBuilder.Entity("WorkIntakeSystem.Core.Entities.User", b =>
                {
                    b.HasOne("WorkIntakeSystem.Core.Entities.BusinessVertical", "BusinessVertical")
                        .WithMany()
                        .HasForeignKey("BusinessVerticalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkIntakeSystem.Core.Entities.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BusinessVertical");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("WorkIntakeSystem.Core.Entities.WorkCategoryConfiguration", b =>
                {
                    b.HasOne("WorkIntakeSystem.Core.Entities.BusinessVertical", "BusinessVertical")
                        .WithMany()
                        .HasForeignKey("BusinessVerticalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BusinessVertical");
                });

            modelBuilder.Entity("WorkIntakeSystem.Core.Entities.WorkRequest", b =>
                {
                    b.HasOne("WorkIntakeSystem.Core.Entities.BusinessVertical", "BusinessVertical")
                        .WithMany("WorkRequests")
                        .HasForeignKey("BusinessVerticalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkIntakeSystem.Core.Entities.BusinessCapability", "Capability")
                        .WithMany("WorkRequests")
                        .HasForeignKey("CapabilityId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WorkIntakeSystem.Core.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkIntakeSystem.Core.Entities.User", "Submitter")
                        .WithMany("SubmittedRequests")
                        .HasForeignKey("SubmitterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BusinessVertical");

                    b.Navigation("Capability");

                    b.Navigation("Department");

                    b.Navigation("Submitter");
                });

            modelBuilder.Entity("WorkIntakeSystem.Core.Entities.BusinessCapability", b =>
                {
                    b.Navigation("DepartmentMappings");

                    b.Navigation("WorkRequests");
                });

            modelBuilder.Entity("WorkIntakeSystem.Core.Entities.BusinessVertical", b =>
                {
                    b.Navigation("BusinessCapabilities");

                    b.Navigation("Departments");

                    b.Navigation("WorkRequests");
                });

            modelBuilder.Entity("WorkIntakeSystem.Core.Entities.Department", b =>
                {
                    b.Navigation("CapabilityMappings");

                    b.Navigation("Priorities");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("WorkIntakeSystem.Core.Entities.SystemConfiguration", b =>
                {
                    b.Navigation("NextVersions");
                });

            modelBuilder.Entity("WorkIntakeSystem.Core.Entities.User", b =>
                {
                    b.Navigation("AuditTrails");

                    b.Navigation("PriorityVotes");

                    b.Navigation("SubmittedRequests");
                });

            modelBuilder.Entity("WorkIntakeSystem.Core.Entities.WorkRequest", b =>
                {
                    b.Navigation("AuditTrails");

                    b.Navigation("Events");

                    b.Navigation("PriorityVotes");
                });
#pragma warning restore 612, 618
        }
    }
}
